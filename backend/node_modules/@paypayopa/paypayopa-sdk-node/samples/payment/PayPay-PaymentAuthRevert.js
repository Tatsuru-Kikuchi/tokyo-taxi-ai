/* Copyright 2020, Robosoft */
'use strict';

const PAYPAY = require('../..');

const API_KEY = 'm_179353170152349696_JeNq';
const API_SECRET = '0WnAQrhWEKqmwUUEDFFhXLTBYF83d6gCNE6mAatD';

/**
 * Configure a valid authorization
 * @param {String} clientId     API_KEY for using SDK
 * @param {String} clientSecret API_SECRET for using SDK
 */
try {
  PAYPAY.Configure({
    clientId: API_KEY,
    clientSecret: API_SECRET,
  });
} catch (err) {
  console.log(err);
}

/**
 * Revert a payment authorization
 * This api is used in case, the merchant wants to canel the payment authorization because of cancellation of the order by the user
 *
 * @callback                Callback function to handle result
 * @returns {Object}        Returns result containing STATUS and BODY
 * @param {Object} payload  JSON object payload
 */
try {
  let payload = {
    merchantRevertId: '85C036C0-84EB-4055-B4D0-4B8B63F396BE',
    paymentId: '85C036C0-84EB-4055-B4D0-4B8B63F396BE',
    requestedAt: 1587460334340,
    reason: 'reason anything',
  };
  PAYPAY.PaymentAuthRevert(payload, (result) => {
    console.log(result);
  });
} catch (err) {
  console.log(err);
}
