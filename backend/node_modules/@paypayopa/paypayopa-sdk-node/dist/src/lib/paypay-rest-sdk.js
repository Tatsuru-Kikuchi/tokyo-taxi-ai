'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.payPayRestSDK = void 0;
var auth_1 = require("./auth");
var conf_1 = require("./conf");
var httpsClient_1 = require("./httpsClient");
var crypto_js_1 = __importDefault(require("crypto-js"));
var uuid_1 = require("uuid");
var PayPayRestSDK = (function () {
    function PayPayRestSDK() {
    }
    PayPayRestSDK.prototype.configure = function (clientConfig) {
        auth_1.auth.setAuth(clientConfig.clientId, clientConfig.clientSecret);
    };
    PayPayRestSDK.setHttpsOptions = function (header) {
        PayPayRestSDK.options = {
            hostname: conf_1.config.getHostname(),
            port: conf_1.config.getPortNumber(),
            path: '',
            method: '',
            headers: {
                Authorization: header,
            },
        };
        conf_1.config.setHttpsOptions(this.options);
    };
    PayPayRestSDK.paypaySetupOptions = function (nameApi, nameMethod, input) {
        var _this = this;
        var queryParams = [];
        PayPayRestSDK.options = conf_1.config.getHttpsOptions();
        this.options.path = conf_1.config.getHttpsPath(nameApi, nameMethod);
        this.options.method = conf_1.config.getHttpsMethod(nameApi, nameMethod);
        var authHeader = this.createAuthHeader(this.options.method, this.options.path, input, auth_1.auth);
        if (false === conf_1.config.getHttpsOptions() || undefined === conf_1.config.getHttpsOptions()) {
            this.setHttpsOptions(authHeader);
        }
        if (this.options.method === 'POST') {
            this.options.headers['Content-Type'] = 'application/json';
            this.options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(input));
        }
        else {
            queryParams = this.options.path.match(/{\w+}/g);
            queryParams.forEach(function (q, n) {
                _this.options.path = _this.options.path.replace(q, input[n]);
            });
        }
        return this.options;
    };
    PayPayRestSDK.prototype.qrCodeCreate = function (payload, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'QRCODE_CREATE', payload), payload, function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.qrCodeDelete = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'QRCODE_DELETE', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.getPaymentDetails = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'GET_PAYMENT_DETAILS', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.paymentCancel = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'CANCEL_PAYMENT', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.paymentAuthCapture = function (payload, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'PAYMENT_AUTH_CAPTURE', payload), payload.toString(), function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.paymentAuthRevert = function (payload, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'PAYMENT_AUTH_REVERT', payload), payload.toString(), function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.paymentRefund = function (payload, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'REFUND_PAYMENT', payload), payload.toString(), function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.getRefundDetails = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_PAYMENT', 'GET_REFUND_DETAILS', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.checkUserWalletBalance = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_WALLET', 'CHECK_BALANCE', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.authorization = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_DIRECT_DEBIT', 'AUTHORIZATION', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.prototype.authorizationResult = function (inputParams, callback) {
        httpsClient_1.httpsClient.httpsCall(PayPayRestSDK.paypaySetupOptions('API_DIRECT_DEBIT', 'AUTHORIZATION_RESULT', inputParams), '', function (result) {
            callback(result);
        });
    };
    PayPayRestSDK.options = '';
    PayPayRestSDK.createAuthHeader = function (method, resourceUrl, payLoad, auth) {
        var AUTH_TYPE = "hmac OPA-Auth";
        var epoch = Date.now();
        var contentType = 'application/json';
        var nonce = uuid_1.v4();
        var bodyHash = "";
        if (method == "GET" || !payLoad) {
            payLoad = "";
            bodyHash = "empty";
            contentType = "empty";
            console.log("coming inside GET");
        }
        else {
            var md5 = crypto_js_1.default.algo.MD5.create();
            md5.update(contentType);
            md5.update(payLoad);
            bodyHash = md5
                .finalize()
                .toString(crypto_js_1.default.enc.Base64)
                .toString("utf-8");
        }
        var pathfinder = resourceUrl.split("?");
        resourceUrl = pathfinder[0];
        var signatureRawData = [resourceUrl, method, nonce, epoch, contentType, bodyHash].join("\n");
        var hash = crypto_js_1.default.HmacSHA256(signatureRawData, auth[1]);
        var hashInBase64 = encodeURI(crypto_js_1.default.enc.Base64.stringify(hash));
        var header = [auth[0], hashInBase64, nonce, epoch, bodyHash].join(":");
        return AUTH_TYPE + ":" + header;
    };
    return PayPayRestSDK;
}());
exports.payPayRestSDK = new PayPayRestSDK();
