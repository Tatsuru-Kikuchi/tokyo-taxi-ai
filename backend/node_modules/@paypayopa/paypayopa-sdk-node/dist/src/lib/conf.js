'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
var constants_1 = __importDefault(require("./constants"));
var Conf = (function () {
    function Conf() {
        this.config = {
            HOST_NAME: 'stg.paypay-corp.co.jp',
            BASE_PATH: '/opa/api/v1/',
            API_PAYMENT: {
                QRCODE_CREATE: {
                    METHOD: 'POST',
                    PATH: 'codes',
                },
                QRCODE_DELETE: {
                    METHOD: 'DELETE',
                    PATH: 'codes/{codeId}',
                },
                GET_PAYMENT_DETAILS: {
                    METHOD: 'GET',
                    PATH: 'payments/{merchantPaymentId}',
                },
                CANCEL_PAYMENT: {
                    METHOD: 'DELETE',
                    PATH: 'payments/{merchantPaymentId}',
                },
                PAYMENT_AUTH_CAPTURE: {
                    METHOD: 'POST',
                    PATH: 'payments/capture',
                },
                PAYMENT_AUTH_REVERT: {
                    METHOD: 'POST',
                    PATH: 'payments/preauthorize/revert',
                },
                REFUND_PAYMENT: {
                    METHOD: 'POST',
                    PATH: 'refunds',
                },
                GET_REFUND_DETAILS: {
                    METHOD: 'GET',
                    PATH: 'refunds/{merchantRefundId}',
                },
            },
            API_WALLET: {
                CHECK_BALANCE: {
                    METHOD: 'GET',
                    PATH: 'wallet/check_balance?userAuthorizationId={userAuthorizationId}&amount={amount}&currency={currency}',
                },
            },
            API_DIRECT_DEBIT: {
                AUTHORIZATION: {
                    METHOD: 'GET',
                    PATH: 'user_authorization?apiKey={apiKey}&requestToken={jwtToken}',
                },
                AUTHORIZATION_RESULT: {
                    METHOD: 'GET',
                    PATH: 'user_authorization?apiKey={apiKey}&responseToken={jwtToken}',
                },
            },
            API_APP_INVOKE: {},
            API_WEB_CASHIER: {},
        };
        this.configLookup = JSON.parse(JSON.stringify(this.config));
    }
    Conf.prototype.setHttpsOptions = function (options) {
        this.options = options;
    };
    Conf.prototype.getHttpsOptions = function () {
        return this.options === '' ? false : this.options;
    };
    Conf.prototype.getHttpsMethod = function (nameApi, nameMethod) {
        return this.configLookup[nameApi][nameMethod].METHOD;
    };
    Conf.prototype.getHttpsPath = function (nameApi, nameMethod) {
        return this.configLookup.BASE_PATH + this.configLookup[nameApi][nameMethod].PATH;
    };
    Conf.prototype.getHostname = function () {
        return constants_1.default.HOST_NAME;
    };
    Conf.prototype.getPortNumber = function () {
        return this.config.PORT_NUMBER ? this.config.PORT_NUMBER : 443;
    };
    return Conf;
}());
exports.config = new Conf();
